# Generated by Django 5.2.2 on 2025-09-02 21:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('scientific_name', models.CharField(blank=True, max_length=150)),
                ('category', models.CharField(max_length=50)),
                ('optimal_temp_min', models.FloatField(help_text='Minimum temperature in Celsius')),
                ('optimal_temp_max', models.FloatField(help_text='Maximum temperature in Celsius')),
                ('optimal_rainfall_min', models.FloatField(help_text='Minimum rainfall in mm/month')),
                ('optimal_rainfall_max', models.FloatField(help_text='Maximum rainfall in mm/month')),
                ('soil_type', models.CharField(choices=[('clay', 'Clay'), ('sandy', 'Sandy'), ('loam', 'Loam'), ('silt', 'Silt'), ('peaty', 'Peaty'), ('chalky', 'Chalky')], max_length=20)),
                ('soil_ph_min', models.FloatField(default=6.0)),
                ('soil_ph_max', models.FloatField(default=7.5)),
                ('frost_tolerance', models.BooleanField(default=False)),
                ('drought_tolerance', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('wind_tolerance', models.BooleanField(default=True)),
                ('planting_season', models.CharField(choices=[('spring', 'Spring'), ('summer', 'Summer'), ('autumn', 'Autumn'), ('winter', 'Winter'), ('year_round', 'Year Round')], max_length=20)),
                ('days_to_germination', models.IntegerField(default=7)),
                ('days_to_maturity', models.IntegerField()),
                ('harvest_duration_days', models.IntegerField(default=30)),
                ('spacing_cm', models.IntegerField(help_text='Plant spacing in centimeters')),
                ('water_frequency_days', models.IntegerField(default=3)),
                ('fertilizer_schedule', models.TextField(blank=True)),
                ('common_pests', models.TextField(blank=True)),
                ('common_diseases', models.TextField(blank=True)),
                ('growing_tips', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('companion_plants', models.ManyToManyField(blank=True, to='farm.crop')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('city', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('country_code', models.CharField(default='', max_length=2)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('elevation', models.FloatField(blank=True, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('detected_automatically', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_name', models.CharField(blank=True, max_length=100)),
                ('farm_size_hectares', models.FloatField(blank=True, null=True)),
                ('farming_experience', models.CharField(choices=[('beginner', 'Beginner (0-2 years)'), ('intermediate', 'Intermediate (3-10 years)'), ('experienced', 'Experienced (10+ years)')], default='beginner', max_length=20)),
                ('farming_methods', models.JSONField(default=dict, help_text='organic, conventional, etc.')),
                ('weather_alerts', models.BooleanField(default=True)),
                ('planting_reminders', models.BooleanField(default=True)),
                ('harvest_reminders', models.BooleanField(default=True)),
                ('temperature_unit', models.CharField(choices=[('celsius', 'Celsius'), ('fahrenheit', 'Fahrenheit')], default='celsius', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_crops', models.ManyToManyField(blank=True, to='farm.crop')),
                ('primary_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='farm.location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature_current', models.FloatField()),
                ('temperature_min', models.FloatField(blank=True, null=True)),
                ('temperature_max', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField()),
                ('pressure', models.FloatField(blank=True, null=True)),
                ('wind_speed', models.FloatField(blank=True, null=True)),
                ('wind_direction', models.FloatField(blank=True, null=True)),
                ('wind_gusts', models.FloatField(blank=True, null=True)),
                ('precipitation', models.FloatField(default=0)),
                ('precipitation_probability', models.FloatField(blank=True, null=True)),
                ('weather_code', models.IntegerField()),
                ('weather_description', models.CharField(max_length=100)),
                ('cloud_cover', models.FloatField(blank=True, null=True)),
                ('visibility', models.FloatField(blank=True, null=True)),
                ('uv_index', models.FloatField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_history', to='farm.location')),
            ],
            options={
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='crop',
            index=models.Index(fields=['category'], name='farm_crop_categor_6c4bfe_idx'),
        ),
        migrations.AddIndex(
            model_name='crop',
            index=models.Index(fields=['planting_season'], name='farm_crop_plantin_84e11d_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['latitude', 'longitude'], name='farm_locati_latitud_929075_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['user', 'is_primary'], name='farm_locati_user_id_902e63_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='location',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='weatherdata',
            index=models.Index(fields=['location', 'recorded_at'], name='farm_weathe_locatio_1f0a3c_idx'),
        ),
        migrations.AddIndex(
            model_name='weatherdata',
            index=models.Index(fields=['weather_code'], name='farm_weathe_weather_ee2a93_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='weatherdata',
            unique_together={('location', 'recorded_at')},
        ),
    ]
